"""initial_schema_and_admin

Revision ID: c828a81d1dcb
Revises: 
Create Date: 2025-06-07 09:07:03.098230

"""
from alembic import op
import sqlalchemy as sa
from datetime import datetime
import bcrypt


# revision identifiers, used by Alembic.
revision = 'c828a81d1dcb'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('licenses',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('activation_key', sa.String(length=8), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=True),
    sa.Column('activation_date', sa.DateTime(), nullable=True),
    sa.Column('activation_email', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_licenses_activation_key'), 'licenses', ['activation_key'], unique=True)
    op.create_index(op.f('ix_licenses_id'), 'licenses', ['id'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('whatsapp', sa.String(), nullable=True),
    sa.Column('activity_type', sa.String(), nullable=False),
    sa.Column('password', sa.String(), nullable=False),
    sa.Column('activation_key', sa.String(), nullable=True),
    sa.Column('activation_date', sa.DateTime(), nullable=True),
    sa.Column('registration_date', sa.DateTime(), nullable=True),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('access_level', sa.String(), nullable=True),
    sa.Column('terms_accepted', sa.Boolean(), nullable=True),
    sa.Column('gender', sa.String(), nullable=True),
    sa.Column('birth_day', sa.Integer(), nullable=True),
    sa.Column('birth_month', sa.Integer(), nullable=True),
    sa.Column('married', sa.String(), nullable=True),
    sa.Column('children', sa.String(), nullable=True),
    sa.Column('grandchildren', sa.String(), nullable=True),
    sa.Column('cep', sa.String(), nullable=True),
    sa.Column('street', sa.String(), nullable=True),
    sa.Column('neighborhood', sa.String(), nullable=True),
    sa.Column('state', sa.String(), nullable=True),
    sa.Column('city', sa.String(), nullable=True),
    sa.Column('complement', sa.String(), nullable=True),
    sa.Column('company_activity', sa.String(), nullable=True),
    sa.Column('specialty_area', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_table('basic_data',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('month', sa.Integer(), nullable=False),
    sa.Column('year', sa.Integer(), nullable=False),
    sa.Column('activity_type', sa.String(), nullable=False),
    sa.Column('clients_served', sa.Integer(), nullable=False),
    sa.Column('sales_revenue', sa.Float(), nullable=False),
    sa.Column('sales_expenses', sa.Float(), nullable=False),
    sa.Column('input_product_expenses', sa.Float(), nullable=False),
    sa.Column('fixed_costs', sa.Float(), nullable=True),
    sa.Column('ideal_profit_margin', sa.Float(), nullable=True),
    sa.Column('service_capacity', sa.String(), nullable=True),
    sa.Column('pro_labore', sa.Float(), nullable=True),
    sa.Column('work_hours_per_week', sa.Float(), nullable=True),
    sa.Column('other_fixed_costs', sa.Float(), nullable=True),
    sa.Column('ideal_service_profit_margin', sa.Float(), nullable=True),
    sa.Column('is_current', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_basic_data_id'), 'basic_data', ['id'], unique=False)
    op.create_table('basic_data_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('basic_data_id', sa.Integer(), nullable=True),
    sa.Column('change_description', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['basic_data_id'], ['basic_data.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_basic_data_logs_id'), 'basic_data_logs', ['id'], unique=False)
    # ### end Alembic commands ###

    # Criar usuário administrador padrão
    connection = op.get_bind()
    password = "123456"
    hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())
    
    connection.execute(
        sa.text("""
        INSERT INTO users (
            name, email, whatsapp, activity_type, password, access_level,
            terms_accepted, registration_date, status
        ) VALUES (
            'Administrador', 'adm@adm.com', '48984192339', 'Serviços',
            :password, 'Administrador', true, :now, 'active'
        )
        """),
        {
            "password": hashed_password.decode('utf-8'),
            "now": datetime.now()
        }
    )


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_basic_data_logs_id'), table_name='basic_data_logs')
    op.drop_table('basic_data_logs')
    op.drop_index(op.f('ix_basic_data_id'), table_name='basic_data')
    op.drop_table('basic_data')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_licenses_id'), table_name='licenses')
    op.drop_index(op.f('ix_licenses_activation_key'), table_name='licenses')
    op.drop_table('licenses')
    # ### end Alembic commands ### 